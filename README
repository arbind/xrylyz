
== This rylyz service provides:
o The rylyz wyjyt.js  [http://[RYLYZ_PLAYER_HOST]/assets/rylyz.wyjyt.js]
o The Socket Services (Pusher) that the wyjyt uses
o The rylyz openApp javascript framework
o The rylyz openApp rails framework
o An example blog page showing a usage of wyjyt.js [http://rylyz-holodeck.herokuapp.com/blogger/blog]

== To start the service locally on port 80
Running on port 80 leverages the benefits of websockets
When running locally, turn off your default webserver, 
and set rylyz-local.com to point to local host:
--> $ sudo apachectl stop
--> $ rvmsudo RAILS_ENV=development  rails s -p80
--> $ sudo emacs /etc/hosts (and add the following line for development):
127.0.0.1       rylyz-local.com

== Start MongoDB
mongod run --config /usr/local/Cellar/mongodb/2.0.3-x86_64/mongod.conf

== Pusher APP ID
configure pushher app ids in config/environments/xxx.rb
Keep in mind that this server will launch listeners -
If you start a server in heroku, one in EC2, and one on your local box,
then all 3 servers will be listenting and responding to the same pusher events.

To avoid this ambiguity - start the server in a unique RAILS_ENV,
Optionally, register and get your own Pusher APP ID, and create a personal RAILS_ENV
for your own development by copying development.rb and updating the pusher App ID, key and secret

== When deploying for stage or production
RYLYZ_PLAYER_HOST config var must be set for the widget to work:

When deploying to my-app-name.herokuapp.com simply set HEROKU_APP_NAME
> heroku config:add HEROKU_APP_NAME=my-app-name
and RYLYZ_PLAYER_HOST will automatically be set to my-app-name.herokuapp.com

Otherwise, when deploying to myhost.com set RYLYZ_PLAYER_HOST (either on heroku or elsewhere0)
> heroku config:add RYLYZ_PLAYER_HOST=myhost.com

