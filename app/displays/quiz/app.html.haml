%rylyz{:name=>"quiz"}
  :javascript
    var quizapp = Rylyz.makeNamespace('quizapp')

    // manage phases
    quizapp.resetState = function() {
      Rylyz.timer.cancel('hide-options');
      Rylyz.timer.cancel('score-timer');
      Rylyz.timer.cancel('back-to-game-timer');
      quizapp.gamePhase = "prompted";
      quizapp.hintGiven = false;
    }
    quizapp.startPhasePromptQuestion = function(info) {
      console.log("----starting Question! " + info)
      quizapp.resetState();
      quizapp.question_id = info['question_id']
      Rylyz.timer.start('hide-options')
    }
    quizapp.startPhaseThinking = function(options) {
      console.log("----starting Answering! "  + options)
      quizapp.gamePhase = "thinking";
      quizapp.showAnswers();
      Rylyz.timer.start('score-timer');
    }
    quizapp.startPhaseAnswered = function(options) {
      quizapp.gamePhase = "answered";
    }
    quizapp.startPhaseFinished = function(options) {
      console.log("----finish Answering! "  + options)
      setTimeout(function(){quizapp.gamePhase = "finished";}, 488); //allow 1/2 a second before clicking will take them back to game screen
      Rylyz.timer.start('back-to-game-timer');      
    }

    // nav
    quizapp.goBackToGame = function() {
      quizapp.resetState();

      var screen = Rylyz.currentScreen()
      setTimeout(function(){screen.resetToDefaultData();}, 500)

      var navEvent = {queue:'nav', type:'nav-onClick', appName:'quiz', nextScreen:'game'}
      Rylyz.event.fireEvent(navEvent);

    };

    // CSS update utilities
    quizapp.noMoreHinting = function() {
      $('.ryHint').removeAttr('onclick')
    }
    quizapp.noMoreAnswering = function() {
      $('.ryChoice').removeAttr('onclick')
      quizapp.noMoreHinting();
    }
    quizapp.showAnswers = function() {
      $('.ryAnswers').css('visibility','visible');
    }

    // click handlers
    quizapp.clickQuestionScreen = function() {
      phase = quizapp.gamePhase
      console.log ("clicking with phase: " +phase)
      if ("prompted" == phase)  Rylyz.timer.stop('hide-options')
      if ( "finished" == phase) quizapp.goBackToGame();
    }

    quizapp.choose = function(num, question_id) {
      if ("thinking" != quizapp.gamePhase) return;
      quizapp.startPhaseAnswered();

      Rylyz.timer.stop('score-timer')
      var answer = '.ryAnswer' + num
      $(answer).addClass('rySelected');
      // send choice to server
      var hiEvent= {queue:'hi', appName:'quiz', screenName:'question', type:'choose-answer', choice:num, id: question_id}
      Rylyz.event.fireEvent(hiEvent);
    }

    quizapp.hint = function(question_id) {
      if (quizapp.hintGiven) return;
      quizapp.hintGiven = true;

      //var hiEvent= {queue:'hi', appName:'quiz', screenName:'question', type:'hint', id: question_id}
      //Rylyz.event.fireEvent(hiEvent);
    }

    // hide-options timer
    quizapp.startHideOptionsTimer = function() {
      console.log("Starting Options");
    }
    quizapp.tickHideOptionsTimer = function() {
      console.log("Tick");
    }
    quizapp.stopHideOptionsTimer = function() {
      console.log("Display Options");
      quizapp.startPhaseThinking();
    }
    Rylyz.timer.register('hide-options', quizapp.tickHideOptionsTimer, 3500, false, quizapp.startHideOptionsTimer, quizapp.stopHideOptionsTimer);

    // back-to-game timer
    Rylyz.timer.register('back-to-game-timer', quizapp.goBackToGame, 12000, false);


    // scoreing timer
    quizapp.timeOver = 20; // seconds before time is over for player to choose answer
    quizapp.tickPeriod = 100; //scoring timer interval in milliseconds

    quizapp.startScoreTimer = function() {
      quizapp.ticks = 0;
      quizapp.scorePercent = 100; // in percentage
      console.log("Starting Score percentage: " + quizapp.scorePercent)
    }
    quizapp.tickScoreTimer = function() {
      quizapp.ticks += 1;
      var secondsSoFar = quizapp.ticks / (1000/quizapp.tickPeriod);
      var timeOverTicks = (1000/quizapp.tickPeriod) * quizapp.timeOver; // ticks till time is over
      var percentComplete = 100*(timeOverTicks - quizapp.ticks)/(timeOverTicks);
      percentComplete = Math.floor(percentComplete);
      console.log("ticks: " +quizapp.ticks+ " secondsSoFar: " +secondsSoFar+ " timerOverTicks: " + timeOverTicks + " %complete: " + percentComplete);
      quizapp.scorePercent = percentComplete;
      $('.ryProgress').css('width', ''+ percentComplete + '%')
      console.log(quizapp.scorePercent)
      if (quizapp.ticks == timeOverTicks || 0>quizapp.scorePercent ) {
        quizapp.scorePercent = 0;
        Rylyz.timer.stop('score-timer')
        var hiEvent= {queue:'hi', appName:'quiz', screenName:'question', type:'time-over', id: quizapp.question_id}
        Rylyz.event.fireEvent(hiEvent);
      }

    }
    quizapp.stopScoreTimer = function() {
      quizapp.scorePercent += 1;
      console.log("Final Score: " + quizapp.scorePercent)
    }
    Rylyz.timer.register('score-timer', quizapp.tickScoreTimer, quizapp.tickPeriod, true, quizapp.startScoreTimer, quizapp.stopScoreTimer);

  %app{:name=>"quiz", "data-defaults"=>"{title:'Quiz'}", :"start-screen" => "game"}
    %screen{:name=>"input-nickname"}
    %screen{:name=>"game"}
    %screen{:name=>"question"}
    %screen{:name=>"leaderboard"}
    %screen{:name=>"submit-question"}
    %screen{:name=>"splash"}
    %screen{:name=>"game-over"}

  %screen{:name=>"input-nickname"}
    #signin
      %h1 Play Quiz
      %form{:id=>"nickname-form", :class=>"nickname", :target=>"", :action => "", :method => "", :name=>"nickname"}
        %h3 Please enter your nickname:
        .field
          %input.text{:type => "text", :name => "nickname", :placeholder => "nickname"}
        .field
          %a.button.play{:onclick=>"Rylyz.sendForm(this)"} Start Playing

  %screen{:name=>"game"}
    #ryQuizGame
      %object{:name=>"header"}
      #ryAppContainer
        .ryQuestions
          %object{:name=>"game-title"}
          %collection{:name=>"level1-questions"}
          %collection{:name=>"level2-questions"}
          %collection{:name=>"level3-questions"}
        %object{:name=>"invite-link"}


  %screen{:name=>"question"}
    #ryQuizGame
      %object{:name=>"header"}
      .ryQuestionCanvas{:onclick => "quizapp.clickQuestionScreen();"}
        #ryProgressBar
          .ryProgress
        %object{:name=>"prompt"}

  %screen{:name=>"leaderboard"}
    #ryQuizGame
      %object{:name=>"header"}
      %collection{:name=>"leaders"}
      .button-bar
        .button{"nav-onClick"=>"game"} Back


  %screen{:name=>"submit-question"}
    .button-bar
      .button{"nav-onClick"=>"game"} Back

  %screen{:name=>"splash"}
    #ryWelcome
      %h1
        Welcome
      %h2
        Play games and use cool apps
      %p
        Coming soon!

  %screen{:name=>"game-over"}
    #ryQuizGame
      %object{:name=>"header"}
    #ryGameOver
      %object{:name=>"closing-message"}  
      %object{:name=>"invite-link"}
  
  %object{:name=>"closing-message", "data-defaults"=>"{title:'', msg: '', come_back: '', next_quiz: '', bookmark: '', play_on_your_own_blog: '', signup: '', signup_href: ''}"}
    %h1
      [[msg]]
    %h3 [[next_quiz]]
    .newline [[bookmark]]
    .newline [[come_back]]
    %h3
      %a.newline{href: '[[signup_href]]', target: '_blank'} [[signup]]

  %object{:name=>"invite-link", "data-defaults"=>"{inviteUrl:''}"}
    .ryInviteFriends
      Ask your friends to play by sending them this url:
      .ryInviteUrl
        %span.rySelectable [[inviteUrl]]

  %object{:name=>"header", "data-defaults"=>"{score: ''}"}
    %object{:name=>"loading-screen"}
    .ryHeader
      #ryAppName
        Olympic Trivia
      %p#ryScore
        [[score]] 
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

  %object{:name=>"loading-screen"}
    #ryLoadingScreen

  %object{:name=>"game-title", "data-defaults"=>"{title: ''}"}
    %h2.ryQuestionsHeading [[title]]

  %collection{:name=>"level1-questions", :item=>"question-item", "data-defaultss"=>"[{level:1},{level:2},{level:3},{level:4},{level:5}]"}
    %ul.rySet
      %collection

  %collection{:name=>"level2-questions", :item=>"question-item", "data-defaultss"=>"[{level:1},{level:2},{level:3},{level:4},{level:5}]"}
    %ul.rySet
      %collection

  %collection{:name=>"level3-questions", :item=>"question-item", "data-defaultss"=>"[{level:1},{level:2},{level:3},{level:4},{level:5}]"}
    %ul.rySet
      %collection

  %item{:name=>"question-item"}
    ! [! if (answered) { !]
    %li
      %a.ryQuestion.ryUnlocked.ryAnswered
        %span.ryCheck{:class=>'[[answer_class]]'}
        %span.ryX{:class=>'[[answer_class]]'}
        %span.ryClock{:class=>'[[answer_class]]'}
    ! [! } else { !]
    %li
      %a.ryQuestion.ryUnlocked.ryUnanswered{"fire-onClick-one"=>"{queue:'hi', type:'select-question', select:'[[id]]'}"}
    ! [! } !]



  %object{:name=>"prompt", "data-defaults"=>"{id: '', prompt:'', answer1:'', answer2:'', answer3:'', answer4:''}"}
    #ryTrivia
      %h1
        [[prompt]]
      .ryInner
        #ryTriviaPicks
          .ryChoices
            .ryAnswers
              .ryChoice.ryAnswer1{:onclick => "quizapp.choose(1, '[[id]]')"}
                [[answer1]]
              .ryChoice.ryAnswer2{:onclick => "quizapp.choose(2, '[[id]]')"}
                [[answer2]]
              .ryChoice.ryAnswer3{:onclick => "quizapp.choose(3, '[[id]]')"}
                [[answer3]]
              .ryChoice.ryAnswer4{:onclick => "quizapp.choose(4, '[[id]]')"}
                [[answer4]]
        #ryTriviaResults
          %object{:name=>"status"}

  %object{:name=>"status", "data-defaults" => "{status:'', klass:'hidden', reflection:''}"}
    %div{:class => '[[klass]]'}
      %h2#ryStatus
        [[status]]
      .ryQuestionReflection
        [[reflection]]

  %collection{:name=>"leaders", :item=>"leader", "data-defaults"=>"[{nickname:'mike', score:10},{nickname:'john', score:20}]"}
    %h2 Leaders
    %collection

  %item{:name=>"leader"}
    .leader
      [[nickname]] - [[score]]


