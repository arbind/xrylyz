+++ TODO

o ADD more Omni Auth Strategies: https://github.com/intridea/omniauth/wiki/List-of-Strategies

x change directory path for 
  display/TicTacToe => display/tic_tac_toe
  (underscore app name when loading its html)
  Also for stylesheets and images

BattleShip:
http://en.wikipedia.org/wiki/Battleship_(game)
http://sparring.rubyforge.org/battleship/index.html
https://github.com/hallgren/BattleShip

Purchase Flows
1. flow: Purchase when loggedin
  a. with existing card
  b. with new card
  c. with existing mobile phone
  d. with mobile phone

2. flow: Purchase when not logged in
  a. with existing card
  b. with new card
  c. with existing mobile phone
  d. with mobile phone

3. flow: Purchase when not registered
  a. with new card
  b. with new mobile phone

1a. [GetGameCash]:{select amount}(create an OrderObject)
    -> [How2Pay]:{select existing card}
    -> [ConfirmCardPurchase]:{ok}
    -> [AuthorizingCard]
    -> [PurchaseComplete]

1b. [GetGameCash]:{select amount}(create an OrderObject)
    -> [How2Pay]:{choose to add new card}
    -> [AddCard]:{enter details} (save to CustomerObject)
    -> [ConfirmCardPurchase]:{ok}
    -> [AuthorizingCard]
    -> [PurchaseComplete]

2a. [GetGameCash]:{select amount}(create an OrderObject)
    -> [SignIn]:{authenticate}
    -> [How2Pay]:{select existing card}
    -> [ConfirmCardPurchase]:{ok}
    -> [AuthorizingCard]
    -> [PurchaseComplete]

2b. [GetGameCash]:{select amount}(create an OrderObject)
    -> [SignIn]:{authenticate}
    -> [How2Pay]:{choose to add new card}
    -> [AddCard]:{enter details} (save to an OrderObject)
    -> [ConfirmCardPurchase]:{ok}
    -> [AuthorizingCard]
    -> [PurchaseComplete]

3a. [GetGameCash]:{select amount}(create an OrderObject)
    -> [SignIn]:{choose to register}
    -> [Register]:{confirm}
    -> [How2Pay]:{select existing card}
    -> [ConfirmCardPurchase]:{ok}
    -> [AuthorizingCard]
    -> [PurchaseComplete]

3b. [GetGameCash]:{select amount}(create PurchaseObject)
    -> [SignIn]:{authenticate}
    -> [Register]:{confirm}
    -> [How2Pay]:{choose to add new card}
    -> [AddCard]:{enter details} (save to CustomerObject)
    -> [ConfirmCardPurchase]:{ok}
    -> [AuthorizingCard]
    -> [PurchaseComplete]

1 GetGameCash
  User selects game ammount
  Create purchase token
  if logged in -> nav to How2Pay
  else -> nav to sign in

2 How2Pay
  Display Purchase token
  prompt: would you like to pay?
  show:
    make credit card payment:
      existing cards -> nav to ConfirmCardPurchase
      add a card -> nav to AddCard
    make mobile payment
      existing phone -> nav to EnterCode
      add a phone -> nav EnterMobilePhone 
  back -> GetGameCash 

3 ConfirmCardPurchase
  Display Purchase token
  nav to -> AuthorizingCard

4 AuthorizingCard
  Display Purchase token
  if authorized -> nav to PurchaseComplete
  else -> nav to CouldNotAuthorize

5 PurchaseComplete

-------
6 AddCard 
  Display Purchase token
  nav to -> ConfirmCardPurchase


9 CouldNotAuthorize
  Display Purchase token
  display reason
  ok -> nav to How2Pay

2 SignIn
  Display Purchase token
  Prompt: Sign in with:
  email
    If email exists -> nav to EnterPassword
    else -> nav to RegisterAccount
  facebook
  twitter
  google+
  tumblr
  nav to -> How2Pay

3 EnterPassword
  Display Purchase token
  if login ok -> nav to How2Pay
  else prompt try again (2x) then nav to SignIn
  cancel -> nav to SignIn

4 RegisterAccount
  Display Purchase token
  Display email
  prompt for password + confirmation
  if registration ok -> nav to How2Pay
  else display reason
  cancel -> nav to SignIn


----
7 AddPhone
  Display Purchase token
  nav to -> EnterCode

9 EnterCode
  Display Purchase token
  prompt to enter code (or send via sms)
    if code is correct -> nav to PurchaseComplete
    else -> display invalid code, please re-enter
  cancel -> nav to How2Pay


Wyjyt
framework for app
adaptive css?

Connect4
adaptive css?

chat
adaptive css?


RELIABILITY
o add client-side retry for lost messages
  add unique message id that increments with every send
  add a try# field to every message that defaults to 1
  add a timeout for the expected response
  return the unique message id on responses to wid's
  if a message response times out, increment the try# and resend.
  when a message is received, cancel the timeout
  notify user of connectivity issues (use indicator in status bar)


UI Framework
o modal prompt

o animation framework

o reset each display on first render
  When playing a game and leaving, then starting a new game.
  the displays show the end of the last game played.
  when showing a display, be have a reset data function prior to rendering

o Create a  ModelReferenceTable for BackBone Models only.
Allow displays to reference a model by name in the ModelReferenceTable
(Instead of creating their own default-empty model)
This will let multiple display's point to the same model.
the server will still update models, by sending updates to a named display,
All other displays referencing that same model should auto-update as well.

o Create a conditional navigation for click events.
Say you want to navigate to the chat room screen on click,
if you have already registerd your name, then nav to chat room screen
else nav to registration screen first to enter name, then to the chat room screen

o prepopulate form data with model

o Create a wizard which has many screens bound to the same model set
(May also be able to use this for the conditional navigation)
  + model set (maybe one root model?)
  + screen set (all the screens in the wizard)
  + rule set - specify screen flow logic

Services:
o login: username, facebook, twitter, google+
o invite friends to a game
o share post
o store: gifts, identity
o purchase: mobile payment, paypal, credit card, others?
o subscription: (same options)
o leader-board
o achievments
o persistence: mongoDB


o To Fix Request-URI Too Large:
  After a successfull login using OPENID to signin with Yahoo, you may get "Request-URI Too Large" error.
  You can reconfigure the threshhold in your webserver.
  For webrick: update a config file somewhere in: 
  ~/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/1.9.1/webrick/httprequest.rb 
  search for: RequestURITooLarge and change the max value to: 8192 instead of 1024
